#!/usr/bin/env ruby

require 'optparse'

require_relative 'file_set'
require_relative 'file_stats'
require_relative 'function_stats'
require_relative 'output_writer'

options = {}
OptionParser.new do |opts|
  opts.program_name = "flogpp"
  opts.version = "1.0a"
  opts.banner = "Usage: flogpp [options] [files ...]"
  opts.separator "Analyze the given files for how tortured the code is."
  opts.separator "If no files are given, it will search for common c/cpp extensions from the"
  opts.separator "current directory."
  opts.separator ""

  opts.on("-v", "--version", "Display version") do
    puts "flogpp version 1.0a"
    exit
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

def get_files
  files = Array.new
  ARGV.each do |a|
    file = File.absolute_path a
    if !File.file? file
      puts "Unable to find #{file}"
      next
    end
    files << file
  end

  if files.empty?
    files  = Dir.glob File.join("**", "*.c")
    files += Dir.glob File.join("**", "*.cpp")
    files += Dir.glob File.join("**", "*.cc")
    files += Dir.glob File.join("**", "*.cxx")
    files += Dir.glob File.join("**", "*.h")
    files += Dir.glob File.join("**", "*.hh")
  end
  files
end

MEBIBYTE = 1048576
def filter_files files
  filtered = Array.new
  files.each do |file|
    if File.size(file) > 10 * MEBIBYTE
      puts "#{file} too large; skipping"
      next
    end
    filtered << file
  end

  filtered
end

files = filter_files get_files
if files.empty?
  puts "No files to process."
  exit 1
end

set = FileSet.new files
file_stats = FileStats.new set.scored_files, set.total_score
function_stats = FunctionStats.new set.analyzed, set.total_score
writer = OutputWriter.new

writer.write_header set.total_score, file_stats, function_stats
writer.write_separator
writer.write_file_summary file_stats
writer.write_function_summary function_stats
