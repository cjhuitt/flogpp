#!/usr/bin/env ruby

require 'optparse'

require_relative 'file_set'
require_relative 'output_writer'
require_relative 'stats'

options = {}
options[:extensions] = ["c", "cpp", "cc", "cxx", "h", "hh"]
options[:rank] = :overall
OptionParser.new do |opts|
  opts.program_name = "flogpp"
  opts.version = "1.0a"
  opts.banner = "Usage: flogpp [options] [files ...]"
  opts.separator "Analyze the given files for how tortured the code is."
  opts.separator "If no files are given, it will search for common c/cpp extensions from the"
  opts.separator "current directory."
  opts.separator ""

  opts.on("-a", "--assignments", "Score by assignments only") do
    options[:rank] = :assignments
  end

  opts.on("-b", "--branches", "Score by branches only") do
    options[:rank] = :branches
  end

  opts.on("-c", "--conditionals", "Score by conditionals only") do
    options[:rank] = :conditionals
  end

  opts.on("-d", "--details", "Show detailed scores (assignments, branches, conditionals)") do
    options[:details] = true
  end

  opts.on("-e", "--ex", "--extensions a,b,c", Array, "Search for files with the given extension(s) (default c,cpp,cc,cxx,h,hh)") do |exts|
    options[:extensions] = exts
  end

  opts.on("--[no-]files", "Show the file summary information") do |f|
    options[:file_summary] = f
  end

  opts.on("-f", "--full", "Show the entire list of file or function information (default worst 10%)") do
    options[:full] = true
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end

  opts.on("-mCOUNT", "--max COUNT", Integer, "(Maximum) number of the worst files or functions to show (default worst 10%)") do |c|
    options[:max_count] = c
  end

  opts.on("-pCOUNT", "--percent COUNT", Integer, "(Maximum) percent of the worst files or functions to show (default worst 10%)") do |c|
    if !c.between?( 0, 100)
      puts "Invalid percent given (must be between 0 and 100)"
      exit 1
    end
    options[:max_percent] = c
  end

  opts.on("-s", "--score", "Show only the score summaries and averages") do
    options[:score] = true
  end

  opts.on("-v", "--version", "Display version") do
    puts "flogpp version 1.0a"
    exit
  end
end.parse!

def get_files extensions
  files = Array.new
  ARGV.each do |a|
    file = File.absolute_path a
    if !File.file? file
      puts "Unable to find #{file}"
      next
    end
    files << file
  end

  if files.empty?
    files  = Array.new
    extensions.each do |ext|
            files += Dir.glob File.join("**", "*.#{ext}")
    end
  end
  files
end

MEBIBYTE = 1048576
def filter_files files
  filtered = Array.new
  files.each do |file|
    if File.size(file) > 10 * MEBIBYTE
      puts "#{file} too large; skipping"
      next
    end
    filtered << file
  end

  filtered
end

files = filter_files get_files options[:extensions]
if files.empty?
  puts "No files to process."
  exit 1
end

set = FileSet.new files
file_stats = Stats.new set.scored_files, set.totals, options
function_stats = Stats.new set.analyzed, set.totals, options

score_fmt = options[:details] ? DetailsScoreFormatter :
    case options[:rank]
    when :assignments
      AssignmentsScoreFormatter
    when :branches
      BranchesScoreFormatter
    when :conditionals
      ConditionalsScoreFormatter
    else
      OverallScoreFormatter
    end
writer = OutputWriter.new score_fmt

writer.write_header set.totals, file_stats, function_stats
if not options[:score]
  writer.write_separator
  writer.write_file_summary file_stats if options[:file_summary]
  writer.write_function_summary function_stats
end
